-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/IITH-SBJoshi/haskell-14#readme</a>
@package spelly
@version 0.1.0.0

module Dictionary_Operations

-- | This function is used to parse the dictionary string ignoring it's
--   frequency
load_dictionary_without_frequencies :: String -> [String]

-- | This function is used to parse the dictionary along with its frequency
load_dictionary_with_frequencies :: String -> [(String, Int)]

-- | It return the list of all words present in the string passed to it
give_me_words :: String -> [String]

-- | It gives the list of all distinct words in a string along with its
--   frequency that is How many times that word occoured in the string
give_me_word_frequency :: String -> [(String, Int)]

-- | It gives the list of all words present in the string in which all
--   identical words are grouped together into a nested list
group_same_words :: String -> [[String]]

-- | This function takes a string and replaces characters which are not
--   allowed by char_filter with space
clean_text :: [Char] -> [Char]

module Edit_Distance

-- | This function takes two words in the string format and retrurn the
--   edit - distance between them using the edit distance algorithm
distance :: Eq a => [a] -> [a] -> Int

module String_Operation

-- | This Function takes a text line and dictionary as it's arguments and
--   produces a list of all wrong words in that line.
wrong_words_of_string :: String -> String -> [String]

-- | This function take a word and a text line as it's arguments and
--   produces a list of position of that word in that line.
indices_in_text :: (Num b, Enum b) => [Char] -> [Char] -> [b]

-- | This Function takes a text line and dictionary as it's arguments and
--   produces a list of unique wrong words in that line.
wrong_words_in_line :: String -> String -> [String]

-- | This function takes the line and dictionary as it's argument and
--   produces the list of pair of position of wrong word in that line and
--   wrong word.
position_of_wrong_words_in_line :: (Ord a, Num a, Enum a) => [Char] -> String -> [(a, [Char])]

-- | This function takes a text string and dictionary string as it's
--   argument and produces the list of tuples of line_number, position of
--   worng word in line and the wrong word in the text.
error_in_file :: (Ord t, Num t, Num t1, Enum t, Enum t1) => String -> String -> [(t1, t, [Char])]

-- | This function takes line_number, line string and dictionary as it's
--   arguments and produces a list of tuples of line_number, position of
--   worng word in line and the wrong word in the text.
make_tuple :: (Ord t, Num t, Enum t) => t1 -> [Char] -> String -> [(t1, t, [Char])]

-- | This is the main function that we call in Main.hs, It gives us the
--   String of wrong words and suggestion of them in required format.
print_suggestion :: String -> String -> Int -> Int -> String

-- | This function takes the text string, dictionary string , number of
--   maximumm suggestion and edit distance as it's argument and produces
--   the list of tuple of line number, position number, wrong word and
--   suggestion for this wrong word for all wrong word preesent in given
--   text string respective to the dictionary string.
suggestions :: (Ord t, Num t, Num t1, Enum t, Enum t1) => String -> String -> Int -> Int -> [(t1, t, [Char], [[Char]])]

-- | This function take a word, a dictionary string, maximum number of
--   suggestion and edit distance as it's argument and produces the list of
--   suggestion for that wrong word according to the given dictionary.
give_me_suggestion :: [Char] -> String -> Int -> Int -> [[Char]]

module Main

-- | This function enable to run the program in different ways when the
--   arguments passed are different
dispatch :: [(String, [String] -> IO ())]
main :: IO ()

-- | This is used to run the program when only the text file is specified
--   by the user
t :: [String] -> IO ()

-- | This is used to run the program when both dictionay and text file is
--   specified by the user
td :: [String] -> IO ()

-- | This is used to run the program when dictionary , text file and
--   suggestion number is specified by the user
tds :: [String] -> IO ()

-- | This is used to run the rogram only when text file and edit bound is
--   specified by the user
te :: [String] -> IO ()

-- | This is used when the user specifies textfile, dictionary and the edit
--   bound
tde :: [String] -> IO ()

-- | This is used to run the program when all the parameters are specified
--   by the user
tdse :: [String] -> IO ()

-- | This is used to run the program when only text file and suggestion_no
--   is specified by the user
ts :: [String] -> IO ()

-- | This is used to run the program when textfile and edit bound and
--   suggestin no is specified by the user
tse :: [String] -> IO ()
